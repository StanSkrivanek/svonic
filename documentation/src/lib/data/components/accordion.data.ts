import { change } from '$lib/data/events/change.data';
import { disabled } from '$lib/data/props/disabled.data';
import { mode } from '$lib/data/props/mode.data';
import type { ComponentDataAPI } from '$lib/types/component-data-api.type';

export const AccordionData: ComponentDataAPI = {
	description: {
		en: `Accordions provide collapsible sections in your content to reduce vertical space while providing a way of organizing and grouping information. All accordion components should be grouped inside accordion-group components.`
	},
	dispatchedEventList: [{ ...change }],
	forwardedEventList: [],
	ionic: {
		documentationUrl: 'https://ionicframework.com/docs/api/accordion',
		sourceUrl:
			'https://github.com/ionic-team/ionic-framework/tree/main/core/src/components/accordion'
	},
	keyboardNavigationList: [
		{
			description: {
				en: `When used inside an accordion-group, accordion has full keyboard support for interacting with the component. The following table details what each key does:`
			},
			valueList: [
				{
					function: {
						en: `When focus is on the accordion header, the accordion will collapse or expand depending on the state of the component.`
					},
					key: 'Space or Enter',
					keyCodeList: [
						{
							key: ['Space']
						},
						{
							key: ['Enter']
						}
					]
				},
				{
					function: { en: `Moves focus to the next focusable element.` },
					key: 'Tab',
					keyCodeList: [
						{
							key: ['Tab']
						}
					]
				},
				{
					function: { en: `Moves focus to the previous focusable element.` },
					key: 'Shift + Tab',
					keyCodeList: [
						{
							key: ['Shift', 'Tab']
						}
					]
				},
				{
					function: {
						en: `When focus is on an accordion header, moves focus to the next accordion header.
					When focus is on the last accordion header, moves focus to the first accordion header.`
					},
					key: 'Down Arrow',
					keyCodeList: [
						{
							key: ['▼']
						}
					]
				},
				{
					function: {
						en: `When focus is on an accordion header, moves focus to the previous accordion header.
					When focus is on the first accordion header, moves focus to the last accordion header.`
					},
					key: 'Up Arrow',
					keyCodeList: [
						{
							key: ['▲']
						}
					]
				},
				{
					function: {
						en: `When focus is on an accordion header, moves focus to the next accordion header.`
					},
					key: 'Home',
					keyCodeList: [
						{
							key: ['Home']
						}
					]
				},
				{
					function: {
						en: `When focus is on an accordion header, moves focus to the last accordion header.`
					},
					key: 'End',
					keyCodeList: [
						{
							key: ['End']
						}
					]
				}
			]
		}
	],
	label: 'Accordion',
	methodList: [],
	name: 'accordion',
	propList: [
		{ ...disabled },
		{ ...mode },
		{
			defaultValue: 'false',
			description: {
				en: `If true, the accordion group cannot be interacted with, but does not alter the opacity.`
			},
			hasDemo: false,
			isSpecial: false,
			name: 'readonly',
			valueList: [
				{
					type: 'boolean',
					value: 'false'
				},
				{
					type: 'boolean',
					value: 'true'
				}
			]
		},
		{
			defaultValue: 'chevronDown',
			description: {
				en: `The toggle icon to use. This icon will be rotated when the accordion is expanded or collapsed.`
			},
			hasDemo: false,
			isSpecial: false,
			name: 'toggleIcon',
			valueList: [
				{
					type: 'string',
					value: 'string'
				}
			]
		},
		{
			defaultValue: 'end',
			description: {
				en: `The slot inside of the Item component to place the toggle icon. Defaults to 'end'.`
			},
			hasDemo: false,
			isSpecial: false,
			name: 'toggleIconSlot',
			valueList: [
				{
					type: 'string',
					value: 'end'
				},
				{
					type: 'string',
					value: 'start'
				}
			]
		},
		{
			defaultValue: 'undefined',
			description: { en: `The value of the accordion. Defaults to an autogenerated value.` },
			hasDemo: false,
			isSpecial: false,
			name: 'value',
			valueList: [
				{
					type: 'string',
					value: 'string'
				},
				{
					type: 'undefined',
					value: 'undefined'
				}
			]
		}
	],
	slotList: [
		{
			description: {
				en: `Content is placed below the header and is shown or hidden based on expanded state.`
			},
			name: 'content'
		},
		{
			description: {
				en: `Content is placed at the top and is used to expand or collapse the accordion item.`
			},
			name: 'header'
		}
	]
};
